// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TestTransformer`](crate::operation::test_transformer::builders::TestTransformerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transformer_config(Processor)`](crate::operation::test_transformer::builders::TestTransformerFluentBuilder::transformer_config) / [`set_transformer_config(Option<Vec::<Processor>>)`](crate::operation::test_transformer::builders::TestTransformerFluentBuilder::set_transformer_config):<br>required: **true**<br><p>This structure contains the configuration of this log transformer that you want to test. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.</p><br>
    ///   - [`log_event_messages(impl Into<String>)`](crate::operation::test_transformer::builders::TestTransformerFluentBuilder::log_event_messages) / [`set_log_event_messages(Option<Vec::<String>>)`](crate::operation::test_transformer::builders::TestTransformerFluentBuilder::set_log_event_messages):<br>required: **true**<br><p>An array of the raw log events that you want to use to test this transformer.</p><br>
    /// - On success, responds with [`TestTransformerOutput`](crate::operation::test_transformer::TestTransformerOutput) with field(s):
    ///   - [`transformed_logs(Option<Vec::<TransformedLogRecord>>)`](crate::operation::test_transformer::TestTransformerOutput::transformed_logs): <p>An array where each member of the array includes both the original version and the transformed version of one of the log events that you input.</p>
    /// - On failure, responds with [`SdkError<TestTransformerError>`](crate::operation::test_transformer::TestTransformerError)
    pub fn test_transformer(&self) -> crate::operation::test_transformer::builders::TestTransformerFluentBuilder {
        crate::operation::test_transformer::builders::TestTransformerFluentBuilder::new(self.handle.clone())
    }
}
