// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn rejected_entity_info_correct_errors(
    mut builder: crate::types::builders::RejectedEntityInfoBuilder,
) -> crate::types::builders::RejectedEntityInfoBuilder {
    if builder.error_type.is_none() {
        builder.error_type = "no value was set".parse::<crate::types::EntityRejectionErrorType>().ok()
    }
    builder
}

pub(crate) fn anomaly_correct_errors(mut builder: crate::types::builders::AnomalyBuilder) -> crate::types::builders::AnomalyBuilder {
    if builder.anomaly_id.is_none() {
        builder.anomaly_id = Some(Default::default())
    }
    if builder.pattern_id.is_none() {
        builder.pattern_id = Some(Default::default())
    }
    if builder.anomaly_detector_arn.is_none() {
        builder.anomaly_detector_arn = Some(Default::default())
    }
    if builder.pattern_string.is_none() {
        builder.pattern_string = Some(Default::default())
    }
    if builder.first_seen.is_none() {
        builder.first_seen = Some(Default::default())
    }
    if builder.last_seen.is_none() {
        builder.last_seen = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.active.is_none() {
        builder.active = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    if builder.histogram.is_none() {
        builder.histogram = Some(Default::default())
    }
    if builder.log_samples.is_none() {
        builder.log_samples = Some(Default::default())
    }
    if builder.pattern_tokens.is_none() {
        builder.pattern_tokens = Some(Default::default())
    }
    if builder.log_group_arn_list.is_none() {
        builder.log_group_arn_list = Some(Default::default())
    }
    builder
}

pub(crate) fn delivery_destination_configuration_correct_errors(
    mut builder: crate::types::builders::DeliveryDestinationConfigurationBuilder,
) -> crate::types::builders::DeliveryDestinationConfigurationBuilder {
    if builder.destination_resource_arn.is_none() {
        builder.destination_resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn add_keys_correct_errors(mut builder: crate::types::builders::AddKeysBuilder) -> crate::types::builders::AddKeysBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn copy_value_correct_errors(mut builder: crate::types::builders::CopyValueBuilder) -> crate::types::builders::CopyValueBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn date_time_converter_correct_errors(
    mut builder: crate::types::builders::DateTimeConverterBuilder,
) -> crate::types::builders::DateTimeConverterBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    if builder.match_patterns.is_none() {
        builder.match_patterns = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_keys_correct_errors(mut builder: crate::types::builders::DeleteKeysBuilder) -> crate::types::builders::DeleteKeysBuilder {
    if builder.with_keys.is_none() {
        builder.with_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn grok_correct_errors(mut builder: crate::types::builders::GrokBuilder) -> crate::types::builders::GrokBuilder {
    if builder.r#match.is_none() {
        builder.r#match = Some(Default::default())
    }
    builder
}

pub(crate) fn list_to_map_correct_errors(mut builder: crate::types::builders::ListToMapBuilder) -> crate::types::builders::ListToMapBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn lower_case_string_correct_errors(
    mut builder: crate::types::builders::LowerCaseStringBuilder,
) -> crate::types::builders::LowerCaseStringBuilder {
    if builder.with_keys.is_none() {
        builder.with_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn move_keys_correct_errors(mut builder: crate::types::builders::MoveKeysBuilder) -> crate::types::builders::MoveKeysBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn rename_keys_correct_errors(mut builder: crate::types::builders::RenameKeysBuilder) -> crate::types::builders::RenameKeysBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn split_string_correct_errors(mut builder: crate::types::builders::SplitStringBuilder) -> crate::types::builders::SplitStringBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn substitute_string_correct_errors(
    mut builder: crate::types::builders::SubstituteStringBuilder,
) -> crate::types::builders::SubstituteStringBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn trim_string_correct_errors(mut builder: crate::types::builders::TrimStringBuilder) -> crate::types::builders::TrimStringBuilder {
    if builder.with_keys.is_none() {
        builder.with_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn type_converter_correct_errors(
    mut builder: crate::types::builders::TypeConverterBuilder,
) -> crate::types::builders::TypeConverterBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn upper_case_string_correct_errors(
    mut builder: crate::types::builders::UpperCaseStringBuilder,
) -> crate::types::builders::UpperCaseStringBuilder {
    if builder.with_keys.is_none() {
        builder.with_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_transformation_correct_errors(
    mut builder: crate::types::builders::MetricTransformationBuilder,
) -> crate::types::builders::MetricTransformationBuilder {
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.metric_namespace.is_none() {
        builder.metric_namespace = Some(Default::default())
    }
    if builder.metric_value.is_none() {
        builder.metric_value = Some(Default::default())
    }
    builder
}

pub(crate) fn add_key_entry_correct_errors(mut builder: crate::types::builders::AddKeyEntryBuilder) -> crate::types::builders::AddKeyEntryBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn copy_value_entry_correct_errors(
    mut builder: crate::types::builders::CopyValueEntryBuilder,
) -> crate::types::builders::CopyValueEntryBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn move_key_entry_correct_errors(mut builder: crate::types::builders::MoveKeyEntryBuilder) -> crate::types::builders::MoveKeyEntryBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn rename_key_entry_correct_errors(
    mut builder: crate::types::builders::RenameKeyEntryBuilder,
) -> crate::types::builders::RenameKeyEntryBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.rename_to.is_none() {
        builder.rename_to = Some(Default::default())
    }
    builder
}

pub(crate) fn split_string_entry_correct_errors(
    mut builder: crate::types::builders::SplitStringEntryBuilder,
) -> crate::types::builders::SplitStringEntryBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.delimiter.is_none() {
        builder.delimiter = Some(Default::default())
    }
    builder
}

pub(crate) fn substitute_string_entry_correct_errors(
    mut builder: crate::types::builders::SubstituteStringEntryBuilder,
) -> crate::types::builders::SubstituteStringEntryBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.from.is_none() {
        builder.from = Some(Default::default())
    }
    if builder.to.is_none() {
        builder.to = Some(Default::default())
    }
    builder
}

pub(crate) fn type_converter_entry_correct_errors(
    mut builder: crate::types::builders::TypeConverterEntryBuilder,
) -> crate::types::builders::TypeConverterEntryBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Type>().ok()
    }
    builder
}
