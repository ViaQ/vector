// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_iceberg_destination_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::IcebergDestinationConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.destination_table_configuration_list {
        let mut array_2 = object.key("DestinationTableConfigurationList").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_destination_table_configuration::ser_destination_table_configuration(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.schema_evolution_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("SchemaEvolutionConfiguration").start_object();
        crate::protocol_serde::shape_schema_evolution_configuration::ser_schema_evolution_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.table_creation_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TableCreationConfiguration").start_object();
        crate::protocol_serde::shape_table_creation_configuration::ser_table_creation_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.buffering_hints {
        #[allow(unused_mut)]
        let mut object_10 = object.key("BufferingHints").start_object();
        crate::protocol_serde::shape_buffering_hints::ser_buffering_hints(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.cloud_watch_logging_options {
        #[allow(unused_mut)]
        let mut object_12 = object.key("CloudWatchLoggingOptions").start_object();
        crate::protocol_serde::shape_cloud_watch_logging_options::ser_cloud_watch_logging_options(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.processing_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ProcessingConfiguration").start_object();
        crate::protocol_serde::shape_processing_configuration::ser_processing_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_15.as_str());
    }
    if let Some(var_16) = &input.retry_options {
        #[allow(unused_mut)]
        let mut object_17 = object.key("RetryOptions").start_object();
        crate::protocol_serde::shape_retry_options::ser_retry_options(&mut object_17, var_16)?;
        object_17.finish();
    }
    {
        object.key("RoleARN").string(input.role_arn.as_str());
    }
    if let Some(var_18) = &input.append_only {
        object.key("AppendOnly").boolean(*var_18);
    }
    if let Some(var_19) = &input.catalog_configuration {
        #[allow(unused_mut)]
        let mut object_20 = object.key("CatalogConfiguration").start_object();
        crate::protocol_serde::shape_catalog_configuration::ser_catalog_configuration(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.s3_configuration {
        #[allow(unused_mut)]
        let mut object_22 = object.key("S3Configuration").start_object();
        crate::protocol_serde::shape_s3_destination_configuration::ser_s3_destination_configuration(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}
