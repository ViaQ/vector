// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CancelDomainConfigChange`](crate::operation::cancel_domain_config_change::builders::CancelDomainConfigChangeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::operation::cancel_domain_config_change::builders::CancelDomainConfigChangeFluentBuilder::domain_name) / [`set_domain_name(Option<String>)`](crate::operation::cancel_domain_config_change::builders::CancelDomainConfigChangeFluentBuilder::set_domain_name):<br>required: **true**<br><p>Name of the OpenSearch Service domain configuration request to cancel.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::cancel_domain_config_change::builders::CancelDomainConfigChangeFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::cancel_domain_config_change::builders::CancelDomainConfigChangeFluentBuilder::set_dry_run):<br>required: **false**<br><p>When set to <b>True</b>, returns the list of change IDs and properties that will be cancelled without actually cancelling the change.</p><br>
    /// - On success, responds with [`CancelDomainConfigChangeOutput`](crate::operation::cancel_domain_config_change::CancelDomainConfigChangeOutput) with field(s):
    ///   - [`dry_run(Option<bool>)`](crate::operation::cancel_domain_config_change::CancelDomainConfigChangeOutput::dry_run): <p>Whether or not the request was a dry run. If <b>True</b>, the changes were not actually cancelled.</p>
    ///   - [`cancelled_change_ids(Option<Vec::<String>>)`](crate::operation::cancel_domain_config_change::CancelDomainConfigChangeOutput::cancelled_change_ids): <p>The unique identifiers of the changes that were cancelled.</p>
    ///   - [`cancelled_change_properties(Option<Vec::<CancelledChangeProperty>>)`](crate::operation::cancel_domain_config_change::CancelDomainConfigChangeOutput::cancelled_change_properties): <p>The domain change properties that were cancelled.</p>
    /// - On failure, responds with [`SdkError<CancelDomainConfigChangeError>`](crate::operation::cancel_domain_config_change::CancelDomainConfigChangeError)
    pub fn cancel_domain_config_change(&self) -> crate::operation::cancel_domain_config_change::builders::CancelDomainConfigChangeFluentBuilder {
        crate::operation::cancel_domain_config_change::builders::CancelDomainConfigChangeFluentBuilder::new(self.handle.clone())
    }
}
