// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a destination in Apache Iceberg Tables.</p>
/// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergDestinationDescription {
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg tables.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub destination_table_configuration_list: ::std::option::Option<::std::vec::Vec<crate::types::DestinationTableConfiguration>>,
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub buffering_hints: ::std::option::Option<crate::types::BufferingHints>,
    /// <p>Describes the Amazon CloudWatch logging options for your delivery stream.</p>
    pub cloud_watch_logging_options: ::std::option::Option<crate::types::CloudWatchLoggingOptions>,
    /// <p>Describes a data processing configuration.</p>
    pub processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    /// <p>Describes how Firehose will backup records. Currently,Firehose only supports <code>FailedDataOnly</code> for preview.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub s3_backup_mode: ::std::option::Option<crate::types::IcebergS3BackupMode>,
    /// <p>The retry behavior in case Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    pub retry_options: ::std::option::Option<crate::types::RetryOptions>,
    /// <p>The Amazon Resource Name (ARN) of the Apache Iceberg Tables role.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Configuration describing where the destination Iceberg tables are persisted.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub catalog_configuration: ::std::option::Option<crate::types::CatalogConfiguration>,
    /// <p>Describes a destination in Amazon S3.</p>
    pub s3_destination_description: ::std::option::Option<crate::types::S3DestinationDescription>,
}
impl IcebergDestinationDescription {
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg tables.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_table_configuration_list.is_none()`.
    pub fn destination_table_configuration_list(&self) -> &[crate::types::DestinationTableConfiguration] {
        self.destination_table_configuration_list.as_deref().unwrap_or_default()
    }
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub fn buffering_hints(&self) -> ::std::option::Option<&crate::types::BufferingHints> {
        self.buffering_hints.as_ref()
    }
    /// <p>Describes the Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn cloud_watch_logging_options(&self) -> ::std::option::Option<&crate::types::CloudWatchLoggingOptions> {
        self.cloud_watch_logging_options.as_ref()
    }
    /// <p>Describes a data processing configuration.</p>
    pub fn processing_configuration(&self) -> ::std::option::Option<&crate::types::ProcessingConfiguration> {
        self.processing_configuration.as_ref()
    }
    /// <p>Describes how Firehose will backup records. Currently,Firehose only supports <code>FailedDataOnly</code> for preview.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn s3_backup_mode(&self) -> ::std::option::Option<&crate::types::IcebergS3BackupMode> {
        self.s3_backup_mode.as_ref()
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    pub fn retry_options(&self) -> ::std::option::Option<&crate::types::RetryOptions> {
        self.retry_options.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Apache Iceberg Tables role.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Configuration describing where the destination Iceberg tables are persisted.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn catalog_configuration(&self) -> ::std::option::Option<&crate::types::CatalogConfiguration> {
        self.catalog_configuration.as_ref()
    }
    /// <p>Describes a destination in Amazon S3.</p>
    pub fn s3_destination_description(&self) -> ::std::option::Option<&crate::types::S3DestinationDescription> {
        self.s3_destination_description.as_ref()
    }
}
impl IcebergDestinationDescription {
    /// Creates a new builder-style object to manufacture [`IcebergDestinationDescription`](crate::types::IcebergDestinationDescription).
    pub fn builder() -> crate::types::builders::IcebergDestinationDescriptionBuilder {
        crate::types::builders::IcebergDestinationDescriptionBuilder::default()
    }
}

/// A builder for [`IcebergDestinationDescription`](crate::types::IcebergDestinationDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergDestinationDescriptionBuilder {
    pub(crate) destination_table_configuration_list: ::std::option::Option<::std::vec::Vec<crate::types::DestinationTableConfiguration>>,
    pub(crate) buffering_hints: ::std::option::Option<crate::types::BufferingHints>,
    pub(crate) cloud_watch_logging_options: ::std::option::Option<crate::types::CloudWatchLoggingOptions>,
    pub(crate) processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    pub(crate) s3_backup_mode: ::std::option::Option<crate::types::IcebergS3BackupMode>,
    pub(crate) retry_options: ::std::option::Option<crate::types::RetryOptions>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) catalog_configuration: ::std::option::Option<crate::types::CatalogConfiguration>,
    pub(crate) s3_destination_description: ::std::option::Option<crate::types::S3DestinationDescription>,
}
impl IcebergDestinationDescriptionBuilder {
    /// Appends an item to `destination_table_configuration_list`.
    ///
    /// To override the contents of this collection use [`set_destination_table_configuration_list`](Self::set_destination_table_configuration_list).
    ///
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg tables.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn destination_table_configuration_list(mut self, input: crate::types::DestinationTableConfiguration) -> Self {
        let mut v = self.destination_table_configuration_list.unwrap_or_default();
        v.push(input);
        self.destination_table_configuration_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg tables.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_destination_table_configuration_list(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DestinationTableConfiguration>>,
    ) -> Self {
        self.destination_table_configuration_list = input;
        self
    }
    /// <p>Provides a list of <code>DestinationTableConfigurations</code> which Firehose uses to deliver data to Apache Iceberg tables.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_destination_table_configuration_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DestinationTableConfiguration>> {
        &self.destination_table_configuration_list
    }
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub fn buffering_hints(mut self, input: crate::types::BufferingHints) -> Self {
        self.buffering_hints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub fn set_buffering_hints(mut self, input: ::std::option::Option<crate::types::BufferingHints>) -> Self {
        self.buffering_hints = input;
        self
    }
    /// <p>Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.</p>
    pub fn get_buffering_hints(&self) -> &::std::option::Option<crate::types::BufferingHints> {
        &self.buffering_hints
    }
    /// <p>Describes the Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn cloud_watch_logging_options(mut self, input: crate::types::CloudWatchLoggingOptions) -> Self {
        self.cloud_watch_logging_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn set_cloud_watch_logging_options(mut self, input: ::std::option::Option<crate::types::CloudWatchLoggingOptions>) -> Self {
        self.cloud_watch_logging_options = input;
        self
    }
    /// <p>Describes the Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn get_cloud_watch_logging_options(&self) -> &::std::option::Option<crate::types::CloudWatchLoggingOptions> {
        &self.cloud_watch_logging_options
    }
    /// <p>Describes a data processing configuration.</p>
    pub fn processing_configuration(mut self, input: crate::types::ProcessingConfiguration) -> Self {
        self.processing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes a data processing configuration.</p>
    pub fn set_processing_configuration(mut self, input: ::std::option::Option<crate::types::ProcessingConfiguration>) -> Self {
        self.processing_configuration = input;
        self
    }
    /// <p>Describes a data processing configuration.</p>
    pub fn get_processing_configuration(&self) -> &::std::option::Option<crate::types::ProcessingConfiguration> {
        &self.processing_configuration
    }
    /// <p>Describes how Firehose will backup records. Currently,Firehose only supports <code>FailedDataOnly</code> for preview.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn s3_backup_mode(mut self, input: crate::types::IcebergS3BackupMode) -> Self {
        self.s3_backup_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes how Firehose will backup records. Currently,Firehose only supports <code>FailedDataOnly</code> for preview.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_s3_backup_mode(mut self, input: ::std::option::Option<crate::types::IcebergS3BackupMode>) -> Self {
        self.s3_backup_mode = input;
        self
    }
    /// <p>Describes how Firehose will backup records. Currently,Firehose only supports <code>FailedDataOnly</code> for preview.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_s3_backup_mode(&self) -> &::std::option::Option<crate::types::IcebergS3BackupMode> {
        &self.s3_backup_mode
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    pub fn retry_options(mut self, input: crate::types::RetryOptions) -> Self {
        self.retry_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    pub fn set_retry_options(mut self, input: ::std::option::Option<crate::types::RetryOptions>) -> Self {
        self.retry_options = input;
        self
    }
    /// <p>The retry behavior in case Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    pub fn get_retry_options(&self) -> &::std::option::Option<crate::types::RetryOptions> {
        &self.retry_options
    }
    /// <p>The Amazon Resource Name (ARN) of the Apache Iceberg Tables role.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Apache Iceberg Tables role.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Apache Iceberg Tables role.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Configuration describing where the destination Iceberg tables are persisted.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn catalog_configuration(mut self, input: crate::types::CatalogConfiguration) -> Self {
        self.catalog_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration describing where the destination Iceberg tables are persisted.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_catalog_configuration(mut self, input: ::std::option::Option<crate::types::CatalogConfiguration>) -> Self {
        self.catalog_configuration = input;
        self
    }
    /// <p>Configuration describing where the destination Iceberg tables are persisted.</p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_catalog_configuration(&self) -> &::std::option::Option<crate::types::CatalogConfiguration> {
        &self.catalog_configuration
    }
    /// <p>Describes a destination in Amazon S3.</p>
    pub fn s3_destination_description(mut self, input: crate::types::S3DestinationDescription) -> Self {
        self.s3_destination_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes a destination in Amazon S3.</p>
    pub fn set_s3_destination_description(mut self, input: ::std::option::Option<crate::types::S3DestinationDescription>) -> Self {
        self.s3_destination_description = input;
        self
    }
    /// <p>Describes a destination in Amazon S3.</p>
    pub fn get_s3_destination_description(&self) -> &::std::option::Option<crate::types::S3DestinationDescription> {
        &self.s3_destination_description
    }
    /// Consumes the builder and constructs a [`IcebergDestinationDescription`](crate::types::IcebergDestinationDescription).
    pub fn build(self) -> crate::types::IcebergDestinationDescription {
        crate::types::IcebergDestinationDescription {
            destination_table_configuration_list: self.destination_table_configuration_list,
            buffering_hints: self.buffering_hints,
            cloud_watch_logging_options: self.cloud_watch_logging_options,
            processing_configuration: self.processing_configuration,
            s3_backup_mode: self.s3_backup_mode,
            retry_options: self.retry_options,
            role_arn: self.role_arn,
            catalog_configuration: self.catalog_configuration,
            s3_destination_description: self.s3_destination_description,
        }
    }
}
