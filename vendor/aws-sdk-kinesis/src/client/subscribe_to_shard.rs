// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SubscribeToShard`](crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`consumer_arn(impl Into<String>)`](crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder::consumer_arn) / [`set_consumer_arn(Option<String>)`](crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder::set_consumer_arn):<br>required: **true**<br><p>For this parameter, use the value you obtained when you called <code>RegisterStreamConsumer</code>.</p><br>
    ///   - [`shard_id(impl Into<String>)`](crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder::shard_id) / [`set_shard_id(Option<String>)`](crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder::set_shard_id):<br>required: **true**<br><p>The ID of the shard you want to subscribe to. To see a list of all the shards for a given stream, use <code>ListShards</code>.</p><br>
    ///   - [`starting_position(StartingPosition)`](crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder::starting_position) / [`set_starting_position(Option<StartingPosition>)`](crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder::set_starting_position):<br>required: **true**<br><p>The starting position in the data stream from which to start streaming.</p><br>
    /// - On success, responds with [`SubscribeToShardOutput`](crate::operation::subscribe_to_shard::SubscribeToShardOutput) with field(s):
    ///   - [`event_stream(EventReceiver<SubscribeToShardEventStream, SubscribeToShardEventStreamError>)`](crate::operation::subscribe_to_shard::SubscribeToShardOutput::event_stream): <p>The event stream that your consumer can use to read records from the shard.</p>
    /// - On failure, responds with [`SdkError<SubscribeToShardError>`](crate::operation::subscribe_to_shard::SubscribeToShardError)
    pub fn subscribe_to_shard(&self) -> crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder {
        crate::operation::subscribe_to_shard::builders::SubscribeToShardFluentBuilder::new(self.handle.clone())
    }
}
